
Formula E CAN Bus Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b0  080052b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  080052c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080052c4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e88c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d91  00000000  00000000  0002e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00030660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00031220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023106  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0de  00000000  00000000  00054e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da412  00000000  00000000  00063f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  0013e398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005260 	.word	0x08005260

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005260 	.word	0x08005260

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295
 8000994:	f04f 30ff 	movne.w	r0, #4294967295
 8000998:	f000 b974 	b.w	8000c84 <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9d08      	ldr	r5, [sp, #32]
 80009ba:	4604      	mov	r4, r0
 80009bc:	468e      	mov	lr, r1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d14d      	bne.n	8000a5e <__udivmoddi4+0xaa>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	4694      	mov	ip, r2
 80009c6:	d969      	bls.n	8000a9c <__udivmoddi4+0xe8>
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	b152      	cbz	r2, 80009e4 <__udivmoddi4+0x30>
 80009ce:	fa01 f302 	lsl.w	r3, r1, r2
 80009d2:	f1c2 0120 	rsb	r1, r2, #32
 80009d6:	fa20 f101 	lsr.w	r1, r0, r1
 80009da:	fa0c fc02 	lsl.w	ip, ip, r2
 80009de:	ea41 0e03 	orr.w	lr, r1, r3
 80009e2:	4094      	lsls	r4, r2
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	0c21      	lsrs	r1, r4, #16
 80009ea:	fbbe f6f8 	udiv	r6, lr, r8
 80009ee:	fa1f f78c 	uxth.w	r7, ip
 80009f2:	fb08 e316 	mls	r3, r8, r6, lr
 80009f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009fa:	fb06 f107 	mul.w	r1, r6, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d90a      	bls.n	8000a18 <__udivmoddi4+0x64>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a0a:	f080 811f 	bcs.w	8000c4c <__udivmoddi4+0x298>
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	f240 811c 	bls.w	8000c4c <__udivmoddi4+0x298>
 8000a14:	3e02      	subs	r6, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3310 	mls	r3, r8, r0, r3
 8000a24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a28:	fb00 f707 	mul.w	r7, r0, r7
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x92>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a38:	f080 810a 	bcs.w	8000c50 <__udivmoddi4+0x29c>
 8000a3c:	42a7      	cmp	r7, r4
 8000a3e:	f240 8107 	bls.w	8000c50 <__udivmoddi4+0x29c>
 8000a42:	4464      	add	r4, ip
 8000a44:	3802      	subs	r0, #2
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	1be4      	subs	r4, r4, r7
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	b11d      	cbz	r5, 8000a58 <__udivmoddi4+0xa4>
 8000a50:	40d4      	lsrs	r4, r2
 8000a52:	2300      	movs	r3, #0
 8000a54:	e9c5 4300 	strd	r4, r3, [r5]
 8000a58:	4631      	mov	r1, r6
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0xc2>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	f000 80ef 	beq.w	8000c46 <__udivmoddi4+0x292>
 8000a68:	2600      	movs	r6, #0
 8000a6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a6e:	4630      	mov	r0, r6
 8000a70:	4631      	mov	r1, r6
 8000a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a76:	fab3 f683 	clz	r6, r3
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d14a      	bne.n	8000b14 <__udivmoddi4+0x160>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d302      	bcc.n	8000a88 <__udivmoddi4+0xd4>
 8000a82:	4282      	cmp	r2, r0
 8000a84:	f200 80f9 	bhi.w	8000c7a <__udivmoddi4+0x2c6>
 8000a88:	1a84      	subs	r4, r0, r2
 8000a8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a8e:	2001      	movs	r0, #1
 8000a90:	469e      	mov	lr, r3
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d0e0      	beq.n	8000a58 <__udivmoddi4+0xa4>
 8000a96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a9a:	e7dd      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000a9c:	b902      	cbnz	r2, 8000aa0 <__udivmoddi4+0xec>
 8000a9e:	deff      	udf	#255	; 0xff
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f040 8092 	bne.w	8000bce <__udivmoddi4+0x21a>
 8000aaa:	eba1 010c 	sub.w	r1, r1, ip
 8000aae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab2:	fa1f fe8c 	uxth.w	lr, ip
 8000ab6:	2601      	movs	r6, #1
 8000ab8:	0c20      	lsrs	r0, r4, #16
 8000aba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000abe:	fb07 1113 	mls	r1, r7, r3, r1
 8000ac2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac6:	fb0e f003 	mul.w	r0, lr, r3
 8000aca:	4288      	cmp	r0, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x12c>
 8000ace:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x12a>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f200 80cb 	bhi.w	8000c74 <__udivmoddi4+0x2c0>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	1a09      	subs	r1, r1, r0
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae8:	fb07 1110 	mls	r1, r7, r0, r1
 8000aec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000af0:	fb0e fe00 	mul.w	lr, lr, r0
 8000af4:	45a6      	cmp	lr, r4
 8000af6:	d908      	bls.n	8000b0a <__udivmoddi4+0x156>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b00:	d202      	bcs.n	8000b08 <__udivmoddi4+0x154>
 8000b02:	45a6      	cmp	lr, r4
 8000b04:	f200 80bb 	bhi.w	8000c7e <__udivmoddi4+0x2ca>
 8000b08:	4608      	mov	r0, r1
 8000b0a:	eba4 040e 	sub.w	r4, r4, lr
 8000b0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x9a>
 8000b14:	f1c6 0720 	rsb	r7, r6, #32
 8000b18:	40b3      	lsls	r3, r6
 8000b1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b22:	fa20 f407 	lsr.w	r4, r0, r7
 8000b26:	fa01 f306 	lsl.w	r3, r1, r6
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	40f9      	lsrs	r1, r7
 8000b2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b32:	fa00 f306 	lsl.w	r3, r0, r6
 8000b36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b3a:	0c20      	lsrs	r0, r4, #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fb09 1118 	mls	r1, r9, r8, r1
 8000b44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b48:	fb08 f00e 	mul.w	r0, r8, lr
 8000b4c:	4288      	cmp	r0, r1
 8000b4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b52:	d90b      	bls.n	8000b6c <__udivmoddi4+0x1b8>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b5c:	f080 8088 	bcs.w	8000c70 <__udivmoddi4+0x2bc>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f240 8085 	bls.w	8000c70 <__udivmoddi4+0x2bc>
 8000b66:	f1a8 0802 	sub.w	r8, r8, #2
 8000b6a:	4461      	add	r1, ip
 8000b6c:	1a09      	subs	r1, r1, r0
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b74:	fb09 1110 	mls	r1, r9, r0, r1
 8000b78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	458e      	cmp	lr, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1e2>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8c:	d26c      	bcs.n	8000c68 <__udivmoddi4+0x2b4>
 8000b8e:	458e      	cmp	lr, r1
 8000b90:	d96a      	bls.n	8000c68 <__udivmoddi4+0x2b4>
 8000b92:	3802      	subs	r0, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ba2:	42a1      	cmp	r1, r4
 8000ba4:	46c8      	mov	r8, r9
 8000ba6:	46a6      	mov	lr, r4
 8000ba8:	d356      	bcc.n	8000c58 <__udivmoddi4+0x2a4>
 8000baa:	d053      	beq.n	8000c54 <__udivmoddi4+0x2a0>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x212>
 8000bae:	ebb3 0208 	subs.w	r2, r3, r8
 8000bb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bba:	fa22 f306 	lsr.w	r3, r2, r6
 8000bbe:	40f1      	lsrs	r1, r6
 8000bc0:	431f      	orrs	r7, r3
 8000bc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	40d8      	lsrs	r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4301      	orrs	r1, r0
 8000be0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bec:	fb07 3610 	mls	r6, r7, r0, r3
 8000bf0:	0c0b      	lsrs	r3, r1, #16
 8000bf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x260>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c0a:	d22f      	bcs.n	8000c6c <__udivmoddi4+0x2b8>
 8000c0c:	429e      	cmp	r6, r3
 8000c0e:	d92d      	bls.n	8000c6c <__udivmoddi4+0x2b8>
 8000c10:	3802      	subs	r0, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	b289      	uxth	r1, r1
 8000c18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c24:	fb06 f30e 	mul.w	r3, r6, lr
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x28a>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c34:	d216      	bcs.n	8000c64 <__udivmoddi4+0x2b0>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d914      	bls.n	8000c64 <__udivmoddi4+0x2b0>
 8000c3a:	3e02      	subs	r6, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	1ac9      	subs	r1, r1, r3
 8000c40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c44:	e738      	b.n	8000ab8 <__udivmoddi4+0x104>
 8000c46:	462e      	mov	r6, r5
 8000c48:	4628      	mov	r0, r5
 8000c4a:	e705      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	e6e3      	b.n	8000a18 <__udivmoddi4+0x64>
 8000c50:	4618      	mov	r0, r3
 8000c52:	e6f8      	b.n	8000a46 <__udivmoddi4+0x92>
 8000c54:	454b      	cmp	r3, r9
 8000c56:	d2a9      	bcs.n	8000bac <__udivmoddi4+0x1f8>
 8000c58:	ebb9 0802 	subs.w	r8, r9, r2
 8000c5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c60:	3801      	subs	r0, #1
 8000c62:	e7a3      	b.n	8000bac <__udivmoddi4+0x1f8>
 8000c64:	4646      	mov	r6, r8
 8000c66:	e7ea      	b.n	8000c3e <__udivmoddi4+0x28a>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	e794      	b.n	8000b96 <__udivmoddi4+0x1e2>
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	e7d1      	b.n	8000c14 <__udivmoddi4+0x260>
 8000c70:	46d0      	mov	r8, sl
 8000c72:	e77b      	b.n	8000b6c <__udivmoddi4+0x1b8>
 8000c74:	3b02      	subs	r3, #2
 8000c76:	4461      	add	r1, ip
 8000c78:	e732      	b.n	8000ae0 <__udivmoddi4+0x12c>
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	e709      	b.n	8000a92 <__udivmoddi4+0xde>
 8000c7e:	4464      	add	r4, ip
 8000c80:	3802      	subs	r0, #2
 8000c82:	e742      	b.n	8000b0a <__udivmoddi4+0x156>

08000c84 <__aeabi_idiv0>:
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <COOLDOWN_SYSTEM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void COOLDOWN_SYSTEM() {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	return ;
 8000c8c:	bf00      	nop
}
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t data[16];
  HAL_StatusTypeDef statT, statA;
  uint16_t temp_val, acc_val;
  float temp_final;
  float pole1 = -1;
 8000c9e:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <main+0x250>)
 8000ca0:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca2:	f000 fd55 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca6:	f000 f941 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000caa:	f000 fac7 	bl	800123c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000cae:	f000 f9fb 	bl	80010a8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000cb2:	f000 fa6b 	bl	800118c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000cb6:	f000 fa97 	bl	80011e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cba:	f000 f9a3 	bl	8001004 <MX_ADC1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //BOARD 1
	  // Indicating that we want to read the temperature data
	  data[0] = BASE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	703b      	strb	r3, [r7, #0]
	  	  statT = HAL_I2C_Master_Transmit(&hi2c1, TMP_ADDR, data, 1, HAL_MAX_DELAY);
 8000cc2:	2390      	movs	r3, #144	; 0x90
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	463a      	mov	r2, r7
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4886      	ldr	r0, [pc, #536]	; (8000eec <main+0x254>)
 8000cd2:	f002 fc23 	bl	800351c <HAL_I2C_Master_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	74fb      	strb	r3, [r7, #19]
	  	  if (statT != HAL_OK) {
 8000cda:	7cfb      	ldrb	r3, [r7, #19]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <main+0x54>
	  		  strcpy((char*)data, "Error Tx\n");
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4a83      	ldr	r2, [pc, #524]	; (8000ef0 <main+0x258>)
 8000ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce6:	c303      	stmia	r3!, {r0, r1}
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	e039      	b.n	8000d60 <main+0xc8>
	  	  }
	  	  else {
	  		  statT = HAL_I2C_Master_Receive(&hi2c1, TMP_ADDR, data, 2, HAL_MAX_DELAY);
 8000cec:	2390      	movs	r3, #144	; 0x90
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	487c      	ldr	r0, [pc, #496]	; (8000eec <main+0x254>)
 8000cfc:	f002 fd0c 	bl	8003718 <HAL_I2C_Master_Receive>
 8000d00:	4603      	mov	r3, r0
 8000d02:	74fb      	strb	r3, [r7, #19]
	  		  if (statT != HAL_OK) {
 8000d04:	7cfb      	ldrb	r3, [r7, #19]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <main+0x7e>
	  			  strcpy((char*)data, "Error Rx\n");
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4a79      	ldr	r2, [pc, #484]	; (8000ef4 <main+0x25c>)
 8000d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d10:	c303      	stmia	r3!, {r0, r1}
 8000d12:	801a      	strh	r2, [r3, #0]
 8000d14:	e024      	b.n	8000d60 <main+0xc8>
	  		  }
	  		  else {
	  			  temp_val = ((uint16_t)data[0] << 4) | (data[1] << 4);
 8000d16:	783b      	ldrb	r3, [r7, #0]
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	83fb      	strh	r3, [r7, #30]

	  			  if (temp_val < 0x7FF) {
 8000d28:	8bfb      	ldrh	r3, [r7, #30]
 8000d2a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d805      	bhi.n	8000d3e <main+0xa6>
	  				  temp_val |= 0xF000;
 8000d32:	8bfb      	ldrh	r3, [r7, #30]
 8000d34:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d38:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d3c:	83fb      	strh	r3, [r7, #30]
	  			  }

	  			  temp_final = 0.625 * temp_val;
 8000d3e:	8bfb      	ldrh	r3, [r7, #30]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcdd 	bl	8000700 <__aeabi_i2d>
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	4b6b      	ldr	r3, [pc, #428]	; (8000ef8 <main+0x260>)
 8000d4c:	f7ff fa5c 	bl	8000208 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff fdc4 	bl	80008e4 <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	61bb      	str	r3, [r7, #24]
	  		  }
	  	  }

	  	  // Let the system cool down if the accumulator cells are getting too hot
	  	  if (temp_final > MAX_TEMP) {
 8000d60:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000efc <main+0x264>
 8000d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	dd01      	ble.n	8000d76 <main+0xde>
	  		  COOLDOWN_SYSTEM();
 8000d72:	f7ff ff89 	bl	8000c88 <COOLDOWN_SYSTEM>
	  	  }

	  	  // BOARD 2
	  	  data[2] = BASE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	70bb      	strb	r3, [r7, #2]
	  	  statA = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADDR, data, 1, HAL_MAX_DELAY);
 8000d7a:	234a      	movs	r3, #74	; 0x4a
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	463a      	mov	r2, r7
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	4858      	ldr	r0, [pc, #352]	; (8000eec <main+0x254>)
 8000d8a:	f002 fbc7 	bl	800351c <HAL_I2C_Master_Transmit>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	74bb      	strb	r3, [r7, #18]
	  	  if (statA != HAL_OK) {
 8000d92:	7cbb      	ldrb	r3, [r7, #18]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <main+0x10c>
	  		  strcpy((char*)data, "Error Tx\n");
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <main+0x258>)
 8000d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9e:	c303      	stmia	r3!, {r0, r1}
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	e01d      	b.n	8000de0 <main+0x148>
	  	  }
	  	  else {
	  		  statA = HAL_I2C_Master_Receive(&hi2c1, ACC_ADDR, data, 2, HAL_MAX_DELAY);
 8000da4:	234a      	movs	r3, #74	; 0x4a
 8000da6:	b299      	uxth	r1, r3
 8000da8:	463a      	mov	r2, r7
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2302      	movs	r3, #2
 8000db2:	484e      	ldr	r0, [pc, #312]	; (8000eec <main+0x254>)
 8000db4:	f002 fcb0 	bl	8003718 <HAL_I2C_Master_Receive>
 8000db8:	4603      	mov	r3, r0
 8000dba:	74bb      	strb	r3, [r7, #18]
	  		  if (statA != HAL_OK) {
 8000dbc:	7cbb      	ldrb	r3, [r7, #18]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <main+0x136>
	  			  strcpy((char*)data, "Error Rx\n");
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <main+0x25c>)
 8000dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc8:	c303      	stmia	r3!, {r0, r1}
 8000dca:	801a      	strh	r2, [r3, #0]
 8000dcc:	e008      	b.n	8000de0 <main+0x148>
	  		  }
	  		  else {
	  			  acc_val = ((uint16_t)data[2] << 4) | (data[3] << 4);
 8000dce:	78bb      	ldrb	r3, [r7, #2]
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	83bb      	strh	r3, [r7, #28]

	  			  // Add processing for data, and a means to adapt to the sensor data
	  		  }
	  	  }

	  	  HAL_ADC_Start(&hadc1);
 8000de0:	4847      	ldr	r0, [pc, #284]	; (8000f00 <main+0x268>)
 8000de2:	f000 fd6b 	bl	80018bc <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 50);
 8000de6:	2132      	movs	r1, #50	; 0x32
 8000de8:	4845      	ldr	r0, [pc, #276]	; (8000f00 <main+0x268>)
 8000dea:	f000 fe6c 	bl	8001ac6 <HAL_ADC_PollForConversion>
	  	  adcData = HAL_ADC_GetValue(&hadc1);
 8000dee:	4844      	ldr	r0, [pc, #272]	; (8000f00 <main+0x268>)
 8000df0:	f000 fef4 	bl	8001bdc <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <main+0x26c>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	  	  if (pole1 == -1) {
 8000dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e04:	eef4 7a47 	vcmp.f32	s15, s14
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d107      	bne.n	8000e1e <main+0x186>
	  		  pole1 = adcData;
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <main+0x26c>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1a:	edc7 7a05 	vstr	s15, [r7, #20]
	  	  }
	  	  HAL_ADC_Stop(&hadc1);
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <main+0x268>)
 8000e20:	f000 fe1e 	bl	8001a60 <HAL_ADC_Stop>

	  	  voltage = (float) (adcData * 3.3) / 4095; // voltage outputted from 12-bit ADC
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <main+0x26c>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc69 	bl	8000700 <__aeabi_i2d>
 8000e2e:	a32a      	add	r3, pc, #168	; (adr r3, 8000ed8 <main+0x240>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff f9e8 	bl	8000208 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fd50 	bl	80008e4 <__aeabi_d2f>
 8000e44:	ee06 0a90 	vmov	s13, r0
 8000e48:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000f08 <main+0x270>
 8000e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e50:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <main+0x274>)
 8000e52:	edc3 7a00 	vstr	s15, [r3]

	  	  // increment the angle according to the reading
	  	  if (voltage > 3.3/2 && pole1 < 3.3/2) {
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <main+0x274>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fc62 	bl	8000724 <__aeabi_f2d>
 8000e60:	a31f      	add	r3, pc, #124	; (adr r3, 8000ee0 <main+0x248>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff fd33 	bl	80008d0 <__aeabi_dcmpgt>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d01b      	beq.n	8000ea8 <main+0x210>
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff fc57 	bl	8000724 <__aeabi_f2d>
 8000e76:	a31a      	add	r3, pc, #104	; (adr r3, 8000ee0 <main+0x248>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fd0a 	bl	8000894 <__aeabi_dcmplt>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d010      	beq.n	8000ea8 <main+0x210>
	  		  angle += stripLen/radius;
 8000e86:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000f10 <main+0x278>
 8000e8a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8000f14 <main+0x27c>
 8000e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <main+0x280>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <main+0x280>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
	  		  pole1 = voltage;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <main+0x274>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]
	  	  }

	  	  tData[0] = acc_val;
 8000ea8:	8bbb      	ldrh	r3, [r7, #28]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x284>)
 8000eae:	701a      	strb	r2, [r3, #0]
	  	  HAL_CAN_AddTxMessage(&hcan1, &TxH, tData, &Mailbox0);
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x288>)
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <main+0x284>)
 8000eb4:	491b      	ldr	r1, [pc, #108]	; (8000f24 <main+0x28c>)
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <main+0x290>)
 8000eb8:	f001 faec 	bl	8002494 <HAL_CAN_AddTxMessage>

	  	  tData[0] = adcData;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <main+0x26c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <main+0x284>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	  	  HAL_CAN_AddTxMessage(&hcan1, &TxH, tData, &Mailbox0);
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <main+0x288>)
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <main+0x284>)
 8000eca:	4916      	ldr	r1, [pc, #88]	; (8000f24 <main+0x28c>)
 8000ecc:	4816      	ldr	r0, [pc, #88]	; (8000f28 <main+0x290>)
 8000ece:	f001 fae1 	bl	8002494 <HAL_CAN_AddTxMessage>
	  data[0] = BASE;
 8000ed2:	e6f4      	b.n	8000cbe <main+0x26>
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	66666666 	.word	0x66666666
 8000edc:	400a6666 	.word	0x400a6666
 8000ee0:	66666666 	.word	0x66666666
 8000ee4:	3ffa6666 	.word	0x3ffa6666
 8000ee8:	bf800000 	.word	0xbf800000
 8000eec:	20000098 	.word	0x20000098
 8000ef0:	08005278 	.word	0x08005278
 8000ef4:	08005284 	.word	0x08005284
 8000ef8:	3fe40000 	.word	0x3fe40000
 8000efc:	42700000 	.word	0x42700000
 8000f00:	20000028 	.word	0x20000028
 8000f04:	20000196 	.word	0x20000196
 8000f08:	457ff000 	.word	0x457ff000
 8000f0c:	20000198 	.word	0x20000198
 8000f10:	3a83126f 	.word	0x3a83126f
 8000f14:	3b9c74a8 	.word	0x3b9c74a8
 8000f18:	2000019c 	.word	0x2000019c
 8000f1c:	20000194 	.word	0x20000194
 8000f20:	2000018c 	.word	0x2000018c
 8000f24:	20000174 	.word	0x20000174
 8000f28:	20000070 	.word	0x20000070

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2234      	movs	r2, #52	; 0x34
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 f988 	bl	8005250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemClock_Config+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SystemClock_Config+0xd4>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fbc5 	bl	8004748 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fc4:	f000 f9c4 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 f8eb 	bl	80041c0 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ff0:	f000 f9ae 	bl	8001350 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3750      	adds	r7, #80	; 0x50
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_ADC1_Init+0x98>)
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_ADC1_Init+0x98>)
 800101e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001022:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_ADC1_Init+0x98>)
 8001032:	2201      	movs	r2, #1
 8001034:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_ADC1_Init+0x98>)
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_ADC1_Init+0xa0>)
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_ADC1_Init+0x98>)
 8001052:	2201      	movs	r2, #1
 8001054:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_ADC1_Init+0x98>)
 8001060:	2201      	movs	r2, #1
 8001062:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_ADC1_Init+0x98>)
 8001066:	f000 fbe5 	bl	8001834 <HAL_ADC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 f96e 	bl	8001350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001074:	2301      	movs	r3, #1
 8001076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_ADC1_Init+0x98>)
 8001086:	f000 fdb7 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001090:	f000 f95e 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000028 	.word	0x20000028
 80010a0:	40012000 	.word	0x40012000
 80010a4:	0f000001 	.word	0x0f000001

080010a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_CAN1_Init+0xd4>)
 80010ae:	4a34      	ldr	r2, [pc, #208]	; (8001180 <MX_CAN1_Init+0xd8>)
 80010b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <MX_CAN1_Init+0xd4>)
 80010b4:	2210      	movs	r2, #16
 80010b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_CAN1_Init+0xd4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <MX_CAN1_Init+0xd4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <MX_CAN1_Init+0xd4>)
 80010c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_CAN1_Init+0xd4>)
 80010ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <MX_CAN1_Init+0xd4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_CAN1_Init+0xd4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <MX_CAN1_Init+0xd4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_CAN1_Init+0xd4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <MX_CAN1_Init+0xd4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_CAN1_Init+0xd4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010f8:	4820      	ldr	r0, [pc, #128]	; (800117c <MX_CAN1_Init+0xd4>)
 80010fa:	f000 ffab 	bl	8002054 <HAL_CAN_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001104:	f000 f924 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  TxH.IDE = CAN_ID_STD;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_CAN1_Init+0xdc>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  TxH.RTR = CAN_RTR_DATA;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_CAN1_Init+0xdc>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  TxH.DLC = 1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_CAN1_Init+0xdc>)
 8001116:	2201      	movs	r2, #1
 8001118:	611a      	str	r2, [r3, #16]

  CFilter.FilterActivation = CAN_FILTER_ENABLE;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_CAN1_Init+0xe0>)
 800111c:	2201      	movs	r2, #1
 800111e:	621a      	str	r2, [r3, #32]
  CFilter.FilterBank = 0;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  CFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  CFilter.FilterIdHigh = 0x000;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_CAN1_Init+0xe0>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
  CFilter.FilterIdLow = 0x000;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  CFilter.FilterMaskIdHigh = 0x000;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_CAN1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  CFilter.FilterMaskIdLow = 0x000;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  CFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  CFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_CAN1_Init+0xe0>)
 800114c:	2201      	movs	r2, #1
 800114e:	61da      	str	r2, [r3, #28]
  CFilter.SlaveStartFilterBank = 14;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001152:	220e      	movs	r2, #14
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &CFilter) != HAL_OK) {
 8001156:	490c      	ldr	r1, [pc, #48]	; (8001188 <MX_CAN1_Init+0xe0>)
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <MX_CAN1_Init+0xd4>)
 800115a:	f001 f877 	bl	800224c <HAL_CAN_ConfigFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_CAN1_Init+0xc0>
	  Error_Handler();
 8001164:	f000 f8f4 	bl	8001350 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_CAN1_Init+0xd4>)
 800116a:	f001 f94f 	bl	800240c <HAL_CAN_Start>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_CAN1_Init+0xd0>
	  Error_Handler();
 8001174:	f000 f8ec 	bl	8001350 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000070 	.word	0x20000070
 8001180:	40006400 	.word	0x40006400
 8001184:	20000174 	.word	0x20000174
 8001188:	20000130 	.word	0x20000130

0800118c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f002 f863 	bl	8003294 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f8bc 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000098 	.word	0x20000098
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f003 fd30 	bl	8004c84 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f891 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000ec 	.word	0x200000ec
 8001238:	40004400 	.word	0x40004400

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_GPIO_Init+0xe0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <MX_GPIO_Init+0xe0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_GPIO_Init+0xe0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_GPIO_Init+0xe0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <MX_GPIO_Init+0xe0>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <MX_GPIO_Init+0xe0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_GPIO_Init+0xe0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <MX_GPIO_Init+0xe0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_GPIO_Init+0xe0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_GPIO_Init+0xe0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <MX_GPIO_Init+0xe0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_GPIO_Init+0xe0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <MX_GPIO_Init+0xe4>)
 80012c8:	f001 ffa6 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012e4:	f001 fe04 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012e8:	2320      	movs	r3, #32
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4808      	ldr	r0, [pc, #32]	; (8001320 <MX_GPIO_Init+0xe4>)
 8001300:	f001 fdf6 	bl	8002ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2028      	movs	r0, #40	; 0x28
 800130a:	f001 fdba 	bl	8002e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130e:	2028      	movs	r0, #40	; 0x28
 8001310:	f001 fdd3 	bl	8002eba <HAL_NVIC_EnableIRQ>

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020800 	.word	0x40020800

08001328 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxH, rData);
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001334:	2100      	movs	r1, #0
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001338:	f001 f987 	bl	800264a <HAL_CAN_GetRxMessage>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000190 	.word	0x20000190
 8001348:	20000158 	.word	0x20000158
 800134c:	20000070 	.word	0x20000070

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_MspInit+0x4c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_MspInit+0x4c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_ADC_MspInit+0x7c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d127      	bne.n	800141e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x80>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001406:	2302      	movs	r3, #2
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_ADC_MspInit+0x84>)
 800141a:	f001 fd69 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40012000 	.word	0x40012000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_CAN_MspInit+0xc4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d14c      	bne.n	80014f0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014a0:	2309      	movs	r3, #9
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <HAL_CAN_MspInit+0xcc>)
 80014ac:	f001 fd20 	bl	8002ef0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2013      	movs	r0, #19
 80014b6:	f001 fce4 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80014ba:	2013      	movs	r0, #19
 80014bc:	f001 fcfd 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2014      	movs	r0, #20
 80014c6:	f001 fcdc 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ca:	2014      	movs	r0, #20
 80014cc:	f001 fcf5 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2015      	movs	r0, #21
 80014d6:	f001 fcd4 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014da:	2015      	movs	r0, #21
 80014dc:	f001 fced 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2016      	movs	r0, #22
 80014e6:	f001 fccc 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80014ea:	2016      	movs	r0, #22
 80014ec:	f001 fce5 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40006400 	.word	0x40006400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_I2C_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001552:	2304      	movs	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_I2C_MspInit+0x8c>)
 800155e:	f001 fcc7 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_I2C_MspInit+0x88>)
 800156c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40005400 	.word	0x40005400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_UART_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_UART_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_UART_MspInit+0x88>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_UART_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_UART_MspInit+0x88>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_UART_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_UART_MspInit+0x8c>)
 800160a:	f001 fc71 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004400 	.word	0x40004400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f8c0 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <CAN1_TX_IRQHandler+0x10>)
 800167e:	f001 f8f6 	bl	800286e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000070 	.word	0x20000070

0800168c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <CAN1_RX0_IRQHandler+0x10>)
 8001692:	f001 f8ec 	bl	800286e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000070 	.word	0x20000070

080016a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <CAN1_RX1_IRQHandler+0x10>)
 80016a6:	f001 f8e2 	bl	800286e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000070 	.word	0x20000070

080016b4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <CAN1_SCE_IRQHandler+0x10>)
 80016ba:	f001 f8d8 	bl	800286e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000070 	.word	0x20000070

080016c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016d0:	f001 fdbc 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f003 fd6d 	bl	8005208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fab3 	bl	8000c98 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001740:	080052b8 	.word	0x080052b8
  ldr r2, =_sbss
 8001744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001748:	200001a4 	.word	0x200001a4

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f001 fb77 	bl	8002e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fdea 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fb8f 	bl	8002ed6 <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f001 fb57 	bl	8002e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	200001a0 	.word	0x200001a0

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200001a0 	.word	0x200001a0

08001834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e033      	b.n	80018b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fdaa 	bl	80013ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187a:	f023 0302 	bic.w	r3, r3, #2
 800187e:	f043 0202 	orr.w	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fae8 	bl	8001e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
 80018a2:	e001      	b.n	80018a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start+0x1a>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0b2      	b.n	8001a3c <HAL_ADC_Start+0x180>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d018      	beq.n	800191e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_ADC_Start+0x18c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_ADC_Start+0x190>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9a      	lsrs	r2, r3, #18
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3b01      	subs	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f9      	bne.n	8001912 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d17a      	bne.n	8001a22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196a:	d106      	bne.n	800197a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f023 0206 	bic.w	r2, r3, #6
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
 8001978:	e002      	b.n	8001980 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_ADC_Start+0x194>)
 800198a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001994:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d12a      	bne.n	80019f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <HAL_ADC_Start+0x198>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d015      	beq.n	80019d8 <HAL_ADC_Start+0x11c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <HAL_ADC_Start+0x19c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d105      	bne.n	80019c2 <HAL_ADC_Start+0x106>
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_ADC_Start+0x194>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_ADC_Start+0x1a0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d136      	bne.n	8001a3a <HAL_ADC_Start+0x17e>
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_ADC_Start+0x194>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d130      	bne.n	8001a3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d129      	bne.n	8001a3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e020      	b.n	8001a3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_ADC_Start+0x198>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11b      	bne.n	8001a3a <HAL_ADC_Start+0x17e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d114      	bne.n	8001a3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	e00b      	b.n	8001a3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	40012300 	.word	0x40012300
 8001a54:	40012000 	.word	0x40012000
 8001a58:	40012100 	.word	0x40012100
 8001a5c:	40012200 	.word	0x40012200

08001a60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Stop+0x16>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e021      	b.n	8001aba <HAL_ADC_Stop+0x5a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d113      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af2:	d10b      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e063      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b0c:	f7ff fe86 	bl	800181c <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b12:	e021      	b.n	8001b58 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1a:	d01d      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x6c>
 8001b22:	f7ff fe7b 	bl	800181c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d212      	bcs.n	8001b58 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d00b      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e03d      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d1d6      	bne.n	8001b14 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f06f 0212 	mvn.w	r2, #18
 8001b6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d123      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11f      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d111      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e113      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x244>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d925      	bls.n	8001c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68d9      	ldr	r1, [r3, #12]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	3b1e      	subs	r3, #30
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43da      	mvns	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	400a      	ands	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4403      	add	r3, r0
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	409a      	lsls	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	e022      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	2207      	movs	r2, #7
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6919      	ldr	r1, [r3, #16]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4403      	add	r3, r0
 8001cac:	409a      	lsls	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d824      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b05      	subs	r3, #5
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b05      	subs	r3, #5
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
 8001d06:	e04c      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	d824      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b23      	subs	r3, #35	; 0x23
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	400a      	ands	r2, r1
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b23      	subs	r3, #35	; 0x23
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
 8001d58:	e023      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b41      	subs	r3, #65	; 0x41
 8001d6c:	221f      	movs	r2, #31
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b41      	subs	r3, #65	; 0x41
 8001d96:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_ADC_ConfigChannel+0x250>)
 8001da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_ADC_ConfigChannel+0x254>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d10f      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d8>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d10b      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_ADC_ConfigChannel+0x254>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d12b      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_ADC_ConfigChannel+0x258>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x1f4>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d122      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ADC_ConfigChannel+0x258>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d111      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_ADC_ConfigChannel+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_ConfigChannel+0x260>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	0c9a      	lsrs	r2, r3, #18
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	40012000 	.word	0x40012000
 8001e50:	10000012 	.word	0x10000012
 8001e54:	20000000 	.word	0x20000000
 8001e58:	431bde83 	.word	0x431bde83

08001e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <ADC_Init+0x1f0>)
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <ADC_Init+0x1f4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e00f      	b.n	8001f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0202 	bic.w	r2, r2, #2
 8001f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e1b      	ldrb	r3, [r3, #24]
 8001f74:	005a      	lsls	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	035a      	lsls	r2, r3, #13
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	e007      	b.n	8001fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	051a      	lsls	r2, r3, #20
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002012:	025a      	lsls	r2, r3, #9
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	029a      	lsls	r2, r3, #10
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	0f000001 	.word	0x0f000001

08002054 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0ed      	b.n	8002242 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff f9de 	bl	8001434 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002088:	f7ff fbc8 	bl	800181c <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800208e:	e012      	b.n	80020b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002090:	f7ff fbc4 	bl	800181c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d90b      	bls.n	80020b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0c5      	b.n	8002242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0e5      	beq.n	8002090 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0202 	bic.w	r2, r2, #2
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7ff fba2 	bl	800181c <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020da:	e012      	b.n	8002102 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020dc:	f7ff fb9e 	bl	800181c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d90b      	bls.n	8002102 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e09f      	b.n	8002242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e5      	bne.n	80020dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7e5b      	ldrb	r3, [r3, #25]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e9b      	ldrb	r3, [r3, #26]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0220 	bic.w	r2, r2, #32
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7edb      	ldrb	r3, [r3, #27]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0210 	bic.w	r2, r2, #16
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0210 	orr.w	r2, r2, #16
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f1b      	ldrb	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7f5b      	ldrb	r3, [r3, #29]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0204 	orr.w	r2, r2, #4
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e007      	b.n	800220c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	ea42 0103 	orr.w	r1, r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002262:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d003      	beq.n	8002272 <HAL_CAN_ConfigFilter+0x26>
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b02      	cmp	r3, #2
 800226e:	f040 80be 	bne.w	80023ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_CAN_ConfigFilter+0x1bc>)
 8002274:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800228c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	431a      	orrs	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2201      	movs	r2, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3248      	adds	r2, #72	; 0x48
 80022fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002310:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002312:	6979      	ldr	r1, [r7, #20]
 8002314:	3348      	adds	r3, #72	; 0x48
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d122      	bne.n	800236a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002344:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3248      	adds	r2, #72	; 0x48
 800234a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002360:	6979      	ldr	r1, [r7, #20]
 8002362:	3348      	adds	r3, #72	; 0x48
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002384:	e007      	b.n	8002396 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	431a      	orrs	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023b0:	e007      	b.n	80023c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023e0:	f023 0201 	bic.w	r2, r3, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40006400 	.word	0x40006400

0800240c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d12e      	bne.n	800247e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002438:	f7ff f9f0 	bl	800181c <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800243e:	e012      	b.n	8002466 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002440:	f7ff f9ec 	bl	800181c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b0a      	cmp	r3, #10
 800244c:	d90b      	bls.n	8002466 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2205      	movs	r2, #5
 800245e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e012      	b.n	800248c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e006      	b.n	800248c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d003      	beq.n	80024c0 <HAL_CAN_AddTxMessage+0x2c>
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 80b8 	bne.w	8002630 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80a0 	beq.w	8002620 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	0e1b      	lsrs	r3, r3, #24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d907      	bls.n	8002500 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e09e      	b.n	800263e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002500:	2201      	movs	r2, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	409a      	lsls	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	431a      	orrs	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3318      	adds	r3, #24
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	440b      	add	r3, r1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e00f      	b.n	800254e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002538:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002542:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3318      	adds	r3, #24
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	440b      	add	r3, r1
 800254c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3318      	adds	r3, #24
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	440b      	add	r3, r1
 800255e:	3304      	adds	r3, #4
 8002560:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	7d1b      	ldrb	r3, [r3, #20]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d111      	bne.n	800258e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3318      	adds	r3, #24
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4413      	add	r3, r2
 8002576:	3304      	adds	r3, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	6811      	ldr	r1, [r2, #0]
 800257e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3318      	adds	r3, #24
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	440b      	add	r3, r1
 800258a:	3304      	adds	r3, #4
 800258c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3307      	adds	r3, #7
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	061a      	lsls	r2, r3, #24
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3306      	adds	r3, #6
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3305      	adds	r3, #5
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	4313      	orrs	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	3204      	adds	r2, #4
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	4610      	mov	r0, r2
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6811      	ldr	r1, [r2, #0]
 80025b6:	ea43 0200 	orr.w	r2, r3, r0
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3303      	adds	r3, #3
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	061a      	lsls	r2, r3, #24
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3302      	adds	r3, #2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	4610      	mov	r0, r2
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6811      	ldr	r1, [r2, #0]
 80025ec:	ea43 0200 	orr.w	r2, r3, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3318      	adds	r3, #24
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	6811      	ldr	r1, [r2, #0]
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3318      	adds	r3, #24
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	440b      	add	r3, r1
 800261a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e00e      	b.n	800263e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e006      	b.n	800263e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800264a:	b480      	push	{r7}
 800264c:	b087      	sub	sp, #28
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d003      	beq.n	800266e <HAL_CAN_GetRxMessage+0x24>
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b02      	cmp	r3, #2
 800266a:	f040 80f3 	bne.w	8002854 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10e      	bne.n	8002692 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d8      	b.n	8002862 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	331b      	adds	r3, #27
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0204 	and.w	r2, r3, #4
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	331b      	adds	r3, #27
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0d5b      	lsrs	r3, r3, #21
 80026de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	331b      	adds	r3, #27
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	331b      	adds	r3, #27
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4413      	add	r3, r2
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0202 	and.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	331b      	adds	r3, #27
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	331b      	adds	r3, #27
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b2da      	uxtb	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	331b      	adds	r3, #27
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	4413      	add	r3, r2
 8002768:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0a1a      	lsrs	r2, r3, #8
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0c1a      	lsrs	r2, r3, #16
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3302      	adds	r3, #2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e1a      	lsrs	r2, r3, #24
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3303      	adds	r3, #3
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3304      	adds	r3, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0a1a      	lsrs	r2, r3, #8
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3305      	adds	r3, #5
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0c1a      	lsrs	r2, r3, #16
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3306      	adds	r3, #6
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0e1a      	lsrs	r2, r3, #24
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3307      	adds	r3, #7
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0220 	orr.w	r2, r2, #32
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e007      	b.n	8002850 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e006      	b.n	8002862 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b08a      	sub	sp, #40	; 0x28
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d07c      	beq.n	80029ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f983 	bl	8002bdc <HAL_CAN_TxMailbox0CompleteCallback>
 80028d6:	e016      	b.n	8002906 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	e00c      	b.n	8002906 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	e002      	b.n	8002906 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f989 	bl	8002c18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d024      	beq.n	800295a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002918:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f963 	bl	8002bf0 <HAL_CAN_TxMailbox1CompleteCallback>
 800292a:	e016      	b.n	800295a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e00c      	b.n	800295a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	e002      	b.n	800295a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f969 	bl	8002c2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d024      	beq.n	80029ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800296c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f943 	bl	8002c04 <HAL_CAN_TxMailbox2CompleteCallback>
 800297e:	e016      	b.n	80029ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e00c      	b.n	80029ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e002      	b.n	80029ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f949 	bl	8002c40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2208      	movs	r2, #8
 80029ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f930 	bl	8002c54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fe fc8b 	bl	8001328 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2210      	movs	r2, #16
 8002a34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f912 	bl	8002c7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8f9 	bl	8002c68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2210      	movs	r2, #16
 8002a90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8fc 	bl	8002c90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8f5 	bl	8002ca4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d07b      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d072      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d043      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03e      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b3c:	2b60      	cmp	r3, #96	; 0x60
 8002b3e:	d02b      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x32a>
 8002b40:	2b60      	cmp	r3, #96	; 0x60
 8002b42:	d82e      	bhi.n	8002ba2 <HAL_CAN_IRQHandler+0x334>
 8002b44:	2b50      	cmp	r3, #80	; 0x50
 8002b46:	d022      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x320>
 8002b48:	2b50      	cmp	r3, #80	; 0x50
 8002b4a:	d82a      	bhi.n	8002ba2 <HAL_CAN_IRQHandler+0x334>
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d019      	beq.n	8002b84 <HAL_CAN_IRQHandler+0x316>
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d826      	bhi.n	8002ba2 <HAL_CAN_IRQHandler+0x334>
 8002b54:	2b30      	cmp	r3, #48	; 0x30
 8002b56:	d010      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x30c>
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d822      	bhi.n	8002ba2 <HAL_CAN_IRQHandler+0x334>
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d002      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x2f8>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d005      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b64:	e01d      	b.n	8002ba2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b6e:	e019      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b78:	e014      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b82:	e00f      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b8c:	e00a      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b96:	e005      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba0:	e000      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ba2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bb2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f872 	bl	8002cb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e38:	d301      	bcc.n	8002e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00f      	b.n	8002e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <SysTick_Config+0x40>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e46:	210f      	movs	r1, #15
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f7ff ff8e 	bl	8002d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <SysTick_Config+0x40>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <SysTick_Config+0x40>)
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010

08002e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff29 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e94:	f7ff ff3e 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	6978      	ldr	r0, [r7, #20]
 8002ea0:	f7ff ff8e 	bl	8002dc0 <NVIC_EncodePriority>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff5d 	bl	8002d6c <__NVIC_SetPriority>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff31 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffa2 	bl	8002e28 <SysTick_Config>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e165      	b.n	80031d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8154 	bne.w	80031d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80ae 	beq.w	80031d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a5c      	ldr	r2, [pc, #368]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	; (80031f8 <HAL_GPIO_Init+0x308>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4e      	ldr	r2, [pc, #312]	; (80031fc <HAL_GPIO_Init+0x30c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_GPIO_Init+0x310>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_GPIO_Init+0x314>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_GPIO_Init+0x318>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x20a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4a      	ldr	r2, [pc, #296]	; (800320c <HAL_GPIO_Init+0x31c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x206>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a49      	ldr	r2, [pc, #292]	; (8003210 <HAL_GPIO_Init+0x320>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x202>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x21c>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x21c>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x21c>
 800310a:	2300      	movs	r3, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311c:	4935      	ldr	r1, [pc, #212]	; (80031f4 <HAL_GPIO_Init+0x304>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312a:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <HAL_GPIO_Init+0x324>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800314e:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_GPIO_Init+0x324>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_GPIO_Init+0x324>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_GPIO_Init+0x324>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031cc:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_GPIO_Init+0x324>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f ae96 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020800 	.word	0x40020800
 8003204:	40020c00 	.word	0x40020c00
 8003208:	40021000 	.word	0x40021000
 800320c:	40021400 	.word	0x40021400
 8003210:	40021800 	.word	0x40021800
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d006      	beq.n	8003270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f806 	bl	800327c <HAL_GPIO_EXTI_Callback>
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe f922 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f001 f854 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	; (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7fe f974 	bl	800181c <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 80e0 	bne.w	8003704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	4970      	ldr	r1, [pc, #448]	; (8003710 <HAL_I2C_Master_Transmit+0x1f4>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fc58 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e0d3      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Transmit+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_I2C_Master_Transmit+0x1f8>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fac2 	bl	8003b64 <I2C_MasterRequestWrite>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003600:	e066      	b.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fcd2 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6a39      	ldr	r1, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fcc2 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d194      	bne.n	8003602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	461a      	mov	r2, r3
 8003724:	460b      	mov	r3, r1
 8003726:	817b      	strh	r3, [r7, #10]
 8003728:	4613      	mov	r3, r2
 800372a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7fe f876 	bl	800181c <HAL_GetTick>
 8003730:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b20      	cmp	r3, #32
 800373c:	f040 820b 	bne.w	8003b56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2319      	movs	r3, #25
 8003746:	2201      	movs	r2, #1
 8003748:	497c      	ldr	r1, [pc, #496]	; (800393c <HAL_I2C_Master_Receive+0x224>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fb5a 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	e1fe      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_I2C_Master_Receive+0x50>
 8003764:	2302      	movs	r3, #2
 8003766:	e1f7      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d007      	beq.n	800378e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2222      	movs	r2, #34	; 0x22
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2210      	movs	r2, #16
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	893a      	ldrh	r2, [r7, #8]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_I2C_Master_Receive+0x228>)
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fa46 	bl	8003c68 <I2C_MasterRequestRead>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e1b8      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d113      	bne.n	8003816 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e18c      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b01      	cmp	r3, #1
 800381c:	d11b      	bne.n	8003856 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e16c      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b02      	cmp	r3, #2
 800385c:	d11b      	bne.n	8003896 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	e14c      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038bc:	e138      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	f200 80f1 	bhi.w	8003aaa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d123      	bne.n	8003918 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fbed 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e139      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003916:	e10b      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b02      	cmp	r3, #2
 800391e:	d14e      	bne.n	80039be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	2200      	movs	r2, #0
 8003928:	4906      	ldr	r1, [pc, #24]	; (8003944 <HAL_I2C_Master_Receive+0x22c>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa6a 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e10e      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
 800393a:	bf00      	nop
 800393c:	00100002 	.word	0x00100002
 8003940:	ffff0000 	.word	0xffff0000
 8003944:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039bc:	e0b8      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2200      	movs	r2, #0
 80039c6:	4966      	ldr	r1, [pc, #408]	; (8003b60 <HAL_I2C_Master_Receive+0x448>)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa1b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0bf      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2200      	movs	r2, #0
 8003a22:	494f      	ldr	r1, [pc, #316]	; (8003b60 <HAL_I2C_Master_Receive+0x448>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f9ed 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e091      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa8:	e042      	b.n	8003b30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fb00 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04c      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d118      	bne.n	8003b30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f aec2 	bne.w	80038be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004

08003b64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	460b      	mov	r3, r1
 8003b72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d006      	beq.n	8003b8e <I2C_MasterRequestWrite+0x2a>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d003      	beq.n	8003b8e <I2C_MasterRequestWrite+0x2a>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b8c:	d108      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e00b      	b.n	8003bb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b12      	cmp	r3, #18
 8003ba6:	d107      	bne.n	8003bb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f91d 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d103      	bne.n	8003be8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e035      	b.n	8003c58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf4:	d108      	bne.n	8003c08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c04:	611a      	str	r2, [r3, #16]
 8003c06:	e01b      	b.n	8003c40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	11db      	asrs	r3, r3, #7
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 0306 	and.w	r3, r3, #6
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f063 030f 	orn	r3, r3, #15
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	490e      	ldr	r1, [pc, #56]	; (8003c60 <I2C_MasterRequestWrite+0xfc>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f943 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e010      	b.n	8003c58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <I2C_MasterRequestWrite+0x100>)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f933 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	00010008 	.word	0x00010008
 8003c64:	00010002 	.word	0x00010002

08003c68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d006      	beq.n	8003ca2 <I2C_MasterRequestRead+0x3a>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d003      	beq.n	8003ca2 <I2C_MasterRequestRead+0x3a>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ca0:	d108      	bne.n	8003cb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00b      	b.n	8003ccc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b11      	cmp	r3, #17
 8003cba:	d107      	bne.n	8003ccc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f893 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	d103      	bne.n	8003cfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e079      	b.n	8003df4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d08:	d108      	bne.n	8003d1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e05f      	b.n	8003ddc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d1c:	897b      	ldrh	r3, [r7, #10]
 8003d1e:	11db      	asrs	r3, r3, #7
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 0306 	and.w	r3, r3, #6
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f063 030f 	orn	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4930      	ldr	r1, [pc, #192]	; (8003dfc <I2C_MasterRequestRead+0x194>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f8b9 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e054      	b.n	8003df4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4929      	ldr	r1, [pc, #164]	; (8003e00 <I2C_MasterRequestRead+0x198>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f8a9 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e044      	b.n	8003df4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f831 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d103      	bne.n	8003dc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e017      	b.n	8003df4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dc4:	897b      	ldrh	r3, [r7, #10]
 8003dc6:	11db      	asrs	r3, r3, #7
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 0306 	and.w	r3, r3, #6
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f063 030e 	orn	r3, r3, #14
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4907      	ldr	r1, [pc, #28]	; (8003e00 <I2C_MasterRequestRead+0x198>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f865 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	00010008 	.word	0x00010008
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e025      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d021      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fd fcfd 	bl	800181c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d116      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e023      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10d      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	e00c      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0b6      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec0:	e051      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d123      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e046      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d021      	beq.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fd fc7b 	bl	800181c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e020      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e00b      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d18d      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbc:	e02d      	b.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f8ce 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02d      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d021      	beq.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fd fc21 	bl	800181c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d1ca      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800403e:	e02d      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f88d 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02d      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d021      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fd fbe0 	bl	800181c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1ca      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c0:	e042      	b.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d119      	bne.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0210 	mvn.w	r2, #16
 80040d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e029      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004104:	f7fd fb8a 	bl	800181c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e007      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d1b5      	bne.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d11b      	bne.n	80041b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0cc      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d90c      	bls.n	80041fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800421e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d119      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	2b03      	cmp	r3, #3
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e06f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e067      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4934      	ldr	r1, [pc, #208]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b0:	f7fd fab4 	bl	800181c <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b8:	f7fd fab0 	bl	800181c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b2b      	ldr	r3, [pc, #172]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 020c 	and.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1eb      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d20c      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f855 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fa14 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00
 800437c:	40023800 	.word	0x40023800
 8004380:	08005290 	.word	0x08005290
 8004384:	20000000 	.word	0x20000000
 8004388:	20000004 	.word	0x20000004

0800438c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a8:	f7ff fff0 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4903      	ldr	r1, [pc, #12]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	080052a0 	.word	0x080052a0

080043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d0:	f7ff ffdc 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0b5b      	lsrs	r3, r3, #13
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	080052a0 	.word	0x080052a0

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b0a6      	sub	sp, #152	; 0x98
 80043fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441a:	4bc8      	ldr	r3, [pc, #800]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b0c      	cmp	r3, #12
 8004424:	f200 817e 	bhi.w	8004724 <HAL_RCC_GetSysClockFreq+0x330>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <HAL_RCC_GetSysClockFreq+0x3c>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004465 	.word	0x08004465
 8004434:	08004725 	.word	0x08004725
 8004438:	08004725 	.word	0x08004725
 800443c:	08004725 	.word	0x08004725
 8004440:	0800446d 	.word	0x0800446d
 8004444:	08004725 	.word	0x08004725
 8004448:	08004725 	.word	0x08004725
 800444c:	08004725 	.word	0x08004725
 8004450:	08004475 	.word	0x08004475
 8004454:	08004725 	.word	0x08004725
 8004458:	08004725 	.word	0x08004725
 800445c:	08004725 	.word	0x08004725
 8004460:	080045df 	.word	0x080045df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4bb6      	ldr	r3, [pc, #728]	; (8004740 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800446a:	e15f      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446c:	4bb5      	ldr	r3, [pc, #724]	; (8004744 <HAL_RCC_GetSysClockFreq+0x350>)
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004472:	e15b      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004474:	4bb1      	ldr	r3, [pc, #708]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004480:	4bae      	ldr	r3, [pc, #696]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d031      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448c:	4bab      	ldr	r3, [pc, #684]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	2200      	movs	r2, #0
 8004494:	66bb      	str	r3, [r7, #104]	; 0x68
 8004496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	663b      	str	r3, [r7, #96]	; 0x60
 80044a0:	2300      	movs	r3, #0
 80044a2:	667b      	str	r3, [r7, #100]	; 0x64
 80044a4:	4ba7      	ldr	r3, [pc, #668]	; (8004744 <HAL_RCC_GetSysClockFreq+0x350>)
 80044a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80044aa:	462a      	mov	r2, r5
 80044ac:	fb03 f202 	mul.w	r2, r3, r2
 80044b0:	2300      	movs	r3, #0
 80044b2:	4621      	mov	r1, r4
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	4aa2      	ldr	r2, [pc, #648]	; (8004744 <HAL_RCC_GetSysClockFreq+0x350>)
 80044bc:	4621      	mov	r1, r4
 80044be:	fba1 1202 	umull	r1, r2, r1, r2
 80044c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044c4:	460a      	mov	r2, r1
 80044c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80044c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044ca:	4413      	add	r3, r2
 80044cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d2:	2200      	movs	r2, #0
 80044d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80044e0:	f7fc fa50 	bl	8000984 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ee:	e064      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f0:	4b92      	ldr	r3, [pc, #584]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	2200      	movs	r2, #0
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
 80044fa:	657a      	str	r2, [r7, #84]	; 0x54
 80044fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
 8004504:	2300      	movs	r3, #0
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800450c:	4622      	mov	r2, r4
 800450e:	462b      	mov	r3, r5
 8004510:	f04f 0000 	mov.w	r0, #0
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	0159      	lsls	r1, r3, #5
 800451a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451e:	0150      	lsls	r0, r2, #5
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4621      	mov	r1, r4
 8004526:	1a51      	subs	r1, r2, r1
 8004528:	6139      	str	r1, [r7, #16]
 800452a:	4629      	mov	r1, r5
 800452c:	eb63 0301 	sbc.w	r3, r3, r1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800453e:	4659      	mov	r1, fp
 8004540:	018b      	lsls	r3, r1, #6
 8004542:	4651      	mov	r1, sl
 8004544:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004548:	4651      	mov	r1, sl
 800454a:	018a      	lsls	r2, r1, #6
 800454c:	4651      	mov	r1, sl
 800454e:	ebb2 0801 	subs.w	r8, r2, r1
 8004552:	4659      	mov	r1, fp
 8004554:	eb63 0901 	sbc.w	r9, r3, r1
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004564:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004568:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456c:	4690      	mov	r8, r2
 800456e:	4699      	mov	r9, r3
 8004570:	4623      	mov	r3, r4
 8004572:	eb18 0303 	adds.w	r3, r8, r3
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	462b      	mov	r3, r5
 800457a:	eb49 0303 	adc.w	r3, r9, r3
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800458c:	4629      	mov	r1, r5
 800458e:	028b      	lsls	r3, r1, #10
 8004590:	4621      	mov	r1, r4
 8004592:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004596:	4621      	mov	r1, r4
 8004598:	028a      	lsls	r2, r1, #10
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a2:	2200      	movs	r2, #0
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
 80045a6:	647a      	str	r2, [r7, #68]	; 0x44
 80045a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ac:	f7fc f9ea 	bl	8000984 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ba:	4b60      	ldr	r3, [pc, #384]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	3301      	adds	r3, #1
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80045cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80045dc:	e0a6      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045de:	4b57      	ldr	r3, [pc, #348]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ea:	4b54      	ldr	r3, [pc, #336]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02a      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	2200      	movs	r2, #0
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004608:	2100      	movs	r1, #0
 800460a:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <HAL_RCC_GetSysClockFreq+0x350>)
 800460c:	fb03 f201 	mul.w	r2, r3, r1
 8004610:	2300      	movs	r3, #0
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	4413      	add	r3, r2
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_RCC_GetSysClockFreq+0x350>)
 800461a:	fba0 1202 	umull	r1, r2, r0, r2
 800461e:	677a      	str	r2, [r7, #116]	; 0x74
 8004620:	460a      	mov	r2, r1
 8004622:	673a      	str	r2, [r7, #112]	; 0x70
 8004624:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004626:	4413      	add	r3, r2
 8004628:	677b      	str	r3, [r7, #116]	; 0x74
 800462a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462e:	2200      	movs	r2, #0
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
 8004632:	637a      	str	r2, [r7, #52]	; 0x34
 8004634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004638:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800463c:	f7fc f9a2 	bl	8000984 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800464a:	e05b      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	2200      	movs	r2, #0
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
 8004656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	f04f 0000 	mov.w	r0, #0
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	0159      	lsls	r1, r3, #5
 8004676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800467a:	0150      	lsls	r0, r2, #5
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4641      	mov	r1, r8
 8004682:	ebb2 0a01 	subs.w	sl, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb63 0b01 	sbc.w	fp, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800469c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046a0:	ebb2 040a 	subs.w	r4, r2, sl
 80046a4:	eb63 050b 	sbc.w	r5, r3, fp
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	00eb      	lsls	r3, r5, #3
 80046b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b6:	00e2      	lsls	r2, r4, #3
 80046b8:	4614      	mov	r4, r2
 80046ba:	461d      	mov	r5, r3
 80046bc:	4643      	mov	r3, r8
 80046be:	18e3      	adds	r3, r4, r3
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	464b      	mov	r3, r9
 80046c4:	eb45 0303 	adc.w	r3, r5, r3
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046d6:	4629      	mov	r1, r5
 80046d8:	028b      	lsls	r3, r1, #10
 80046da:	4621      	mov	r1, r4
 80046dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e0:	4621      	mov	r1, r4
 80046e2:	028a      	lsls	r2, r1, #10
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ec:	2200      	movs	r2, #0
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	61fa      	str	r2, [r7, #28]
 80046f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f6:	f7fc f945 	bl	8000984 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4613      	mov	r3, r2
 8004700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <HAL_RCC_GetSysClockFreq+0x348>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0f1b      	lsrs	r3, r3, #28
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004722:	e003      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800472a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004730:	4618      	mov	r0, r3
 8004732:	3798      	adds	r7, #152	; 0x98
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	00f42400 	.word	0x00f42400
 8004744:	017d7840 	.word	0x017d7840

08004748 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e28d      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8083 	beq.w	800486e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004768:	4b94      	ldr	r3, [pc, #592]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b04      	cmp	r3, #4
 8004772:	d019      	beq.n	80047a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004774:	4b91      	ldr	r3, [pc, #580]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800477c:	2b08      	cmp	r3, #8
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004780:	4b8e      	ldr	r3, [pc, #568]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d00c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d112      	bne.n	80047c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479a:	4b88      	ldr	r3, [pc, #544]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a6:	d10b      	bne.n	80047c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	4b84      	ldr	r3, [pc, #528]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d05b      	beq.n	800486c <HAL_RCC_OscConfig+0x124>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d157      	bne.n	800486c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e25a      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d106      	bne.n	80047d8 <HAL_RCC_OscConfig+0x90>
 80047ca:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7b      	ldr	r2, [pc, #492]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e01d      	b.n	8004814 <HAL_RCC_OscConfig+0xcc>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0xb4>
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a72      	ldr	r2, [pc, #456]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e00b      	b.n	8004814 <HAL_RCC_OscConfig+0xcc>
 80047fc:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6b      	ldr	r2, [pc, #428]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800480e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fc fffe 	bl	800181c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004824:	f7fc fffa 	bl	800181c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e21f      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b61      	ldr	r3, [pc, #388]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0xdc>
 8004842:	e014      	b.n	800486e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fc ffea 	bl	800181c <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800484c:	f7fc ffe6 	bl	800181c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e20b      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x104>
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06f      	beq.n	800495a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800487a:	4b50      	ldr	r3, [pc, #320]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b00      	cmp	r3, #0
 8004884:	d017      	beq.n	80048b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004886:	4b4d      	ldr	r3, [pc, #308]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800488e:	2b08      	cmp	r3, #8
 8004890:	d105      	bne.n	800489e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004892:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b44      	ldr	r3, [pc, #272]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x186>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e1d3      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4937      	ldr	r1, [pc, #220]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	e03a      	b.n	800495a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d020      	beq.n	800492e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fc ff93 	bl	800181c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fc ff8f 	bl	800181c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1b4      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4925      	ldr	r1, [pc, #148]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
 800492c:	e015      	b.n	800495a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc ff72 	bl	800181c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493c:	f7fc ff6e 	bl	800181c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e193      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d036      	beq.n	80049d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d016      	beq.n	800499c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_RCC_OscConfig+0x27c>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fc ff52 	bl	800181c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497c:	f7fc ff4e 	bl	800181c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e173      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_OscConfig+0x274>)
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x234>
 800499a:	e01b      	b.n	80049d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_OscConfig+0x27c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fc ff3b 	bl	800181c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	e00e      	b.n	80049c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049aa:	f7fc ff37 	bl	800181c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d907      	bls.n	80049c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e15c      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
 80049bc:	40023800 	.word	0x40023800
 80049c0:	42470000 	.word	0x42470000
 80049c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b8a      	ldr	r3, [pc, #552]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ea      	bne.n	80049aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8097 	beq.w	8004b10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b83      	ldr	r3, [pc, #524]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b7f      	ldr	r3, [pc, #508]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a7e      	ldr	r2, [pc, #504]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b7c      	ldr	r3, [pc, #496]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <HAL_RCC_OscConfig+0x4b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d118      	bne.n	8004a50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x4b0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x4b0>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fc fef7 	bl	800181c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fc fef3 	bl	800181c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e118      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	4b6c      	ldr	r3, [pc, #432]	; (8004bf8 <HAL_RCC_OscConfig+0x4b0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x31e>
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6713      	str	r3, [r2, #112]	; 0x70
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x358>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x340>
 8004a6e:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a60      	ldr	r2, [pc, #384]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a5d      	ldr	r2, [pc, #372]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_OscConfig+0x358>
 8004a88:	4b5a      	ldr	r3, [pc, #360]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a56      	ldr	r2, [pc, #344]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f023 0304 	bic.w	r3, r3, #4
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fc feb8 	bl	800181c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fc feb4 	bl	800181c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0d7      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ee      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x368>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fc fea2 	bl	800181c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fc fe9e 	bl	800181c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0c1      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ee      	bne.n	8004adc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ad 	beq.w	8004c74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d060      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d145      	bne.n	8004bba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_RCC_OscConfig+0x4b4>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc fe72 	bl	800181c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc fe6e 	bl	800181c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e093      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x4b4>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc fe43 	bl	800181c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fc fe3f 	bl	800181c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e064      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x452>
 8004bb8:	e05c      	b.n	8004c74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x4b4>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fc fe2c 	bl	800181c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fc fe28 	bl	800181c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e04d      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x480>
 8004be6:	e045      	b.n	8004c74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e040      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c00:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <HAL_RCC_OscConfig+0x538>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d030      	beq.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d129      	bne.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d122      	bne.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d119      	bne.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d10f      	bne.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e03f      	b.n	8004d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fc72 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f829 	bl	8004d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d24:	b0c0      	sub	sp, #256	; 0x100
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	68d9      	ldr	r1, [r3, #12]
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	ea40 0301 	orr.w	r3, r0, r1
 8004d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d78:	f021 010c 	bic.w	r1, r1, #12
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d86:	430b      	orrs	r3, r1
 8004d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	6999      	ldr	r1, [r3, #24]
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	ea40 0301 	orr.w	r3, r0, r1
 8004da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b8f      	ldr	r3, [pc, #572]	; (8004fec <UART_SetConfig+0x2cc>)
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d005      	beq.n	8004dc0 <UART_SetConfig+0xa0>
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <UART_SetConfig+0x2d0>)
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d104      	bne.n	8004dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7ff fb04 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8004dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dc8:	e003      	b.n	8004dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff faeb 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8004dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ddc:	f040 810c 	bne.w	8004ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	1891      	adds	r1, r2, r2
 8004df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dfa:	415b      	adcs	r3, r3
 8004dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e02:	4621      	mov	r1, r4
 8004e04:	eb12 0801 	adds.w	r8, r2, r1
 8004e08:	4629      	mov	r1, r5
 8004e0a:	eb43 0901 	adc.w	r9, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e22:	4690      	mov	r8, r2
 8004e24:	4699      	mov	r9, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	eb18 0303 	adds.w	r3, r8, r3
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e30:	462b      	mov	r3, r5
 8004e32:	eb49 0303 	adc.w	r3, r9, r3
 8004e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e4e:	460b      	mov	r3, r1
 8004e50:	18db      	adds	r3, r3, r3
 8004e52:	653b      	str	r3, [r7, #80]	; 0x50
 8004e54:	4613      	mov	r3, r2
 8004e56:	eb42 0303 	adc.w	r3, r2, r3
 8004e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e64:	f7fb fd8e 	bl	8000984 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b61      	ldr	r3, [pc, #388]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	011c      	lsls	r4, r3, #4
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e90:	415b      	adcs	r3, r3
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e98:	4641      	mov	r1, r8
 8004e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb8:	4692      	mov	sl, r2
 8004eba:	469b      	mov	fp, r3
 8004ebc:	4643      	mov	r3, r8
 8004ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8004ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	18db      	adds	r3, r3, r3
 8004ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eea:	4613      	mov	r3, r2
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004efa:	f7fb fd43 	bl	8000984 <__aeabi_uldivmod>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004f06:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2264      	movs	r2, #100	; 0x64
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	1acb      	subs	r3, r1, r3
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f28:	441c      	add	r4, r3
 8004f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f44:	415b      	adcs	r3, r3
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	1851      	adds	r1, r2, r1
 8004f50:	6339      	str	r1, [r7, #48]	; 0x30
 8004f52:	4649      	mov	r1, r9
 8004f54:	414b      	adcs	r3, r1
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f64:	4659      	mov	r1, fp
 8004f66:	00cb      	lsls	r3, r1, #3
 8004f68:	4651      	mov	r1, sl
 8004f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6e:	4651      	mov	r1, sl
 8004f70:	00ca      	lsls	r2, r1, #3
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	4642      	mov	r2, r8
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f80:	464b      	mov	r3, r9
 8004f82:	460a      	mov	r2, r1
 8004f84:	eb42 0303 	adc.w	r3, r2, r3
 8004f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	18db      	adds	r3, r3, r3
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	eb42 0303 	adc.w	r3, r2, r3
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fb6:	f7fb fce5 	bl	8000984 <__aeabi_uldivmod>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	2164      	movs	r1, #100	; 0x64
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	3332      	adds	r3, #50	; 0x32
 8004fd2:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	f003 0207 	and.w	r2, r3, #7
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4422      	add	r2, r4
 8004fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fe8:	e105      	b.n	80051f6 <UART_SetConfig+0x4d6>
 8004fea:	bf00      	nop
 8004fec:	40011000 	.word	0x40011000
 8004ff0:	40011400 	.word	0x40011400
 8004ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800500a:	4642      	mov	r2, r8
 800500c:	464b      	mov	r3, r9
 800500e:	1891      	adds	r1, r2, r2
 8005010:	6239      	str	r1, [r7, #32]
 8005012:	415b      	adcs	r3, r3
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
 8005016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501a:	4641      	mov	r1, r8
 800501c:	1854      	adds	r4, r2, r1
 800501e:	4649      	mov	r1, r9
 8005020:	eb43 0501 	adc.w	r5, r3, r1
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	00eb      	lsls	r3, r5, #3
 800502e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005032:	00e2      	lsls	r2, r4, #3
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	4643      	mov	r3, r8
 800503a:	18e3      	adds	r3, r4, r3
 800503c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005040:	464b      	mov	r3, r9
 8005042:	eb45 0303 	adc.w	r3, r5, r3
 8005046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005066:	4629      	mov	r1, r5
 8005068:	008b      	lsls	r3, r1, #2
 800506a:	4621      	mov	r1, r4
 800506c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005070:	4621      	mov	r1, r4
 8005072:	008a      	lsls	r2, r1, #2
 8005074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005078:	f7fb fc84 	bl	8000984 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4b60      	ldr	r3, [pc, #384]	; (8005204 <UART_SetConfig+0x4e4>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	011c      	lsls	r4, r3, #4
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	61b9      	str	r1, [r7, #24]
 80050a4:	415b      	adcs	r3, r3
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ac:	4641      	mov	r1, r8
 80050ae:	1851      	adds	r1, r2, r1
 80050b0:	6139      	str	r1, [r7, #16]
 80050b2:	4649      	mov	r1, r9
 80050b4:	414b      	adcs	r3, r1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c4:	4659      	mov	r1, fp
 80050c6:	00cb      	lsls	r3, r1, #3
 80050c8:	4651      	mov	r1, sl
 80050ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ce:	4651      	mov	r1, sl
 80050d0:	00ca      	lsls	r2, r1, #3
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	4642      	mov	r2, r8
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050e0:	464b      	mov	r3, r9
 80050e2:	460a      	mov	r2, r1
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005104:	4649      	mov	r1, r9
 8005106:	008b      	lsls	r3, r1, #2
 8005108:	4641      	mov	r1, r8
 800510a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510e:	4641      	mov	r1, r8
 8005110:	008a      	lsls	r2, r1, #2
 8005112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005116:	f7fb fc35 	bl	8000984 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <UART_SetConfig+0x4e4>)
 8005120:	fba3 1302 	umull	r1, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	2164      	movs	r1, #100	; 0x64
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	3332      	adds	r3, #50	; 0x32
 8005132:	4a34      	ldr	r2, [pc, #208]	; (8005204 <UART_SetConfig+0x4e4>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800513e:	441c      	add	r4, r3
 8005140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005144:	2200      	movs	r2, #0
 8005146:	673b      	str	r3, [r7, #112]	; 0x70
 8005148:	677a      	str	r2, [r7, #116]	; 0x74
 800514a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800514e:	4642      	mov	r2, r8
 8005150:	464b      	mov	r3, r9
 8005152:	1891      	adds	r1, r2, r2
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	415b      	adcs	r3, r3
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800515e:	4641      	mov	r1, r8
 8005160:	1851      	adds	r1, r2, r1
 8005162:	6039      	str	r1, [r7, #0]
 8005164:	4649      	mov	r1, r9
 8005166:	414b      	adcs	r3, r1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005176:	4659      	mov	r1, fp
 8005178:	00cb      	lsls	r3, r1, #3
 800517a:	4651      	mov	r1, sl
 800517c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005180:	4651      	mov	r1, sl
 8005182:	00ca      	lsls	r2, r1, #3
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	4603      	mov	r3, r0
 800518a:	4642      	mov	r2, r8
 800518c:	189b      	adds	r3, r3, r2
 800518e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	663b      	str	r3, [r7, #96]	; 0x60
 80051a4:	667a      	str	r2, [r7, #100]	; 0x64
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051b2:	4649      	mov	r1, r9
 80051b4:	008b      	lsls	r3, r1, #2
 80051b6:	4641      	mov	r1, r8
 80051b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051bc:	4641      	mov	r1, r8
 80051be:	008a      	lsls	r2, r1, #2
 80051c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051c4:	f7fb fbde 	bl	8000984 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <UART_SetConfig+0x4e4>)
 80051ce:	fba3 1302 	umull	r1, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2164      	movs	r1, #100	; 0x64
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <UART_SetConfig+0x4e4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4422      	add	r2, r4
 80051f4:	609a      	str	r2, [r3, #8]
}
 80051f6:	bf00      	nop
 80051f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005202:	bf00      	nop
 8005204:	51eb851f 	.word	0x51eb851f

08005208 <__libc_init_array>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4d0d      	ldr	r5, [pc, #52]	; (8005240 <__libc_init_array+0x38>)
 800520c:	4c0d      	ldr	r4, [pc, #52]	; (8005244 <__libc_init_array+0x3c>)
 800520e:	1b64      	subs	r4, r4, r5
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	2600      	movs	r6, #0
 8005214:	42a6      	cmp	r6, r4
 8005216:	d109      	bne.n	800522c <__libc_init_array+0x24>
 8005218:	4d0b      	ldr	r5, [pc, #44]	; (8005248 <__libc_init_array+0x40>)
 800521a:	4c0c      	ldr	r4, [pc, #48]	; (800524c <__libc_init_array+0x44>)
 800521c:	f000 f820 	bl	8005260 <_init>
 8005220:	1b64      	subs	r4, r4, r5
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	2600      	movs	r6, #0
 8005226:	42a6      	cmp	r6, r4
 8005228:	d105      	bne.n	8005236 <__libc_init_array+0x2e>
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005230:	4798      	blx	r3
 8005232:	3601      	adds	r6, #1
 8005234:	e7ee      	b.n	8005214 <__libc_init_array+0xc>
 8005236:	f855 3b04 	ldr.w	r3, [r5], #4
 800523a:	4798      	blx	r3
 800523c:	3601      	adds	r6, #1
 800523e:	e7f2      	b.n	8005226 <__libc_init_array+0x1e>
 8005240:	080052b0 	.word	0x080052b0
 8005244:	080052b0 	.word	0x080052b0
 8005248:	080052b0 	.word	0x080052b0
 800524c:	080052b4 	.word	0x080052b4

08005250 <memset>:
 8005250:	4402      	add	r2, r0
 8005252:	4603      	mov	r3, r0
 8005254:	4293      	cmp	r3, r2
 8005256:	d100      	bne.n	800525a <memset+0xa>
 8005258:	4770      	bx	lr
 800525a:	f803 1b01 	strb.w	r1, [r3], #1
 800525e:	e7f9      	b.n	8005254 <memset+0x4>

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
